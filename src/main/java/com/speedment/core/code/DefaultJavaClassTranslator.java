/**
 *
 * Copyright (c) 2006-2015, Speedment, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.speedment.core.code;

import com.speedment.api.Speedment;
import com.speedment.codegen.base.Generator;
import com.speedment.codegen.lang.controller.AutoImports;
import com.speedment.codegen.lang.models.AnnotationUsage;
import com.speedment.codegen.lang.models.ClassOrInterface;
import com.speedment.codegen.lang.models.Constructor;
import com.speedment.codegen.lang.models.Field;
import com.speedment.codegen.lang.models.File;
import com.speedment.codegen.lang.models.Interface;
import com.speedment.codegen.lang.models.Javadoc;
import com.speedment.codegen.lang.models.Type;
import static com.speedment.codegen.lang.models.constants.DefaultAnnotationUsage.GENERATED;
import static com.speedment.codegen.lang.models.constants.DefaultJavadocTag.AUTHOR;
import com.speedment.codegen.lang.models.implementation.FileImpl;
import com.speedment.codegen.lang.models.implementation.JavadocImpl;
import com.speedment.codegen.lang.models.values.TextValue;
import static com.speedment.core.code.DefaultJavaClassTranslator.CopyConstructorMode.SETTER;
import com.speedment.api.config.Column;
import com.speedment.api.config.Dbms;
import com.speedment.api.config.ForeignKey;
import com.speedment.api.config.ForeignKeyColumn;
import com.speedment.api.config.Index;
import com.speedment.api.config.Project;
import com.speedment.api.config.Schema;
import com.speedment.api.config.Table;
import com.speedment.api.config.aspects.Child;
import com.speedment.api.config.aspects.Enableable;
import com.speedment.api.config.Node;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static java.util.Objects.requireNonNull;
import java.util.function.BiConsumer;

/**
 *
 * @author pemi
 * @param <C> ConfigEntity type.
 * @param <J> Java type (Interface or Class) to generate
 */
public abstract class DefaultJavaClassTranslator<C extends Node & Enableable, 
    J extends ClassOrInterface<J>> implements JavaClassTranslator<C> {

    public static final String 
        GETTER_METHOD_PREFIX = "get",
        SETTER_METHOD_PREFIX = "set",
        BUILDER_METHOD_PREFIX = SETTER_METHOD_PREFIX,
        GENERATED_JAVADOC_MESSAGE = 
            "\n<p>\nThis Class or Interface has been automatically generated by Speedment.\n" +
            "Any changes made to this Class or Interface will be overwritten.";

    private final C configEntity;
    private final Generator codeGenerator;
    private final Speedment speedment;

    public DefaultJavaClassTranslator(Speedment speedment, Generator codeGenerator, C configEntity) {
        this.speedment = speedment;
        this.configEntity = configEntity;
        this.codeGenerator = codeGenerator;
    }

    @Override
    public C getNode() {
        return configEntity;
    }
    
    protected Speedment getSpeedment() {
        return speedment;
    }

    protected AnnotationUsage generated() {
        return GENERATED.set(new TextValue("Speedment"));
    }

    protected abstract String getFileName();

    protected abstract J make(File file);

    @Override
    public File get() {
        final File file = new FileImpl(baseDirectoryName() + "/" + (isInImplPackage() ? "impl/" : "") + getFileName() + ".java");
        final J item = make(file);
        item.set(getJavaDoc());
        file.add(item);
        file.call(new AutoImports(getCodeGenerator().getDependencyMgr()));
        return file;
    }

    protected abstract String getJavadocRepresentText();

    protected Javadoc getJavaDoc() {
        return new JavadocImpl(getJavadocRepresentText() + " representing an entity (for example, a row) in the " + getNode().toString() + "." + GENERATED_JAVADOC_MESSAGE)
            .add(AUTHOR.setValue("Speedment"));
    }

    public Generator getCodeGenerator() {
        return codeGenerator;
    }

    protected boolean isInImplPackage() {
        return false;
    }

    protected abstract class Builder<T extends ClassOrInterface<T>> {

        private final String name;
        private final Map<Class<?>, List<BiConsumer<T, ? extends Node>>> map;

        // Special for this case
        private final List<BiConsumer<T, ForeignKey>> foreignKeyReferencesThisTableConsumers;

        public Builder(String name) {
            this.name = name;
            this.map = new HashMap<>();
            this.foreignKeyReferencesThisTableConsumers = new ArrayList<>();
        }

        public Builder<T> addProjectConsumer(BiConsumer<T, Project> consumer) {
            aquireListAndAdd(Project.class, consumer);
            return this;
        }

        public Builder<T> addDbmsConsumer(BiConsumer<T, Dbms> consumer) {
            aquireListAndAdd(Dbms.class, consumer);
            return this;
        }

        public Builder<T> addSchemaConsumer(BiConsumer<T, Schema> consumer) {
            aquireListAndAdd(Schema.class, consumer);
            return this;
        }

        public Builder<T> addTableConsumer(BiConsumer<T, Table> consumer) {
            aquireListAndAdd(Table.class, consumer);
            return this;
        }

        public Builder<T> addColumnConsumer(BiConsumer<T, Column> consumer) {
            aquireListAndAdd(Column.class, consumer);
            return this;
        }

        public Builder<T> addIndexConsumer(BiConsumer<T, Index> consumer) {
            aquireListAndAdd(Index.class, consumer);
            return this;
        }

        public Builder<T> addForeignKeyConsumer(BiConsumer<T, ForeignKey> consumer) {
            aquireListAndAdd(ForeignKey.class, consumer);
            return this;
        }

        public Builder<T> addForeignKeyReferencesThisTableConsumer(BiConsumer<T, ForeignKey> consumer) {
            foreignKeyReferencesThisTableConsumers.add(requireNonNull(consumer));
            return this;
        }

        @SuppressWarnings("unchecked")
        protected <C extends Node> void aquireListAndAdd(Class<C> clazz, BiConsumer<T, C> consumer) {
            aquireList(clazz).add(requireNonNull((BiConsumer<T, Node>) consumer));
        }

        @SuppressWarnings("unchecked")
        protected <C extends Node> List<BiConsumer<T, C>> aquireList(Class<?> clazz) {
            return (List<BiConsumer<T, C>>) (List<?>) map.computeIfAbsent(clazz, $ -> new ArrayList<>());
        }

        public void act(T item, Node node) {
            aquireList(node.getInterfaceMainClass())
                .forEach(c -> c.accept(item, node));
        }

        public abstract T newInstance(String name);

        public T build() {
            final T i = newInstance(name);
            act(i, project());
            act(i, dbms());
            act(i, schema());
            act(i, table());

            table().stream()
                .filter(Child<Table>::isEnabled)
                .forEachOrdered(c -> act(i, c));

            if (Table.class.equals(getNode().getInterfaceMainClass())) {
                schema().stream()
                    .filter(Table::isEnabled)
                    .flatMap(t -> t.streamOf(ForeignKey.class))
                    .filter(fk -> fk.stream()
                        .filter(ForeignKeyColumn::isEnabled)
                        .filter(fkc -> fkc.getForeignTableName().equals(getNode().getName()))
                        .findFirst()
                        .isPresent()
                    ).forEachOrdered(fk
                        -> foreignKeyReferencesThisTableConsumers.forEach(
                            c -> c.accept(i, fk)
                        )
                    );
            }

            i.add(generated());
            return i;
        }

    }

    protected class ClassBuilder extends Builder<com.speedment.codegen.lang.models.Class> {

        public ClassBuilder(String name) {
            super(name);
        }

        @Override
        public com.speedment.codegen.lang.models.Class newInstance(String name) {
            return com.speedment.codegen.lang.models.Class.of(name);
        }

    }

    protected class InterfaceBuilder extends Builder<Interface> {

        public InterfaceBuilder(String name) {
            super(name);
        }

        @Override
        public Interface newInstance(String name) {
            return Interface.of(name);
        }

    }

    public Field fieldFor(Column c) {
        return Field.of(variableName(c), Type.of(c.getMapping()));
    }

    public Constructor emptyConstructor() {
        return Constructor.of().public_();
    }

    public enum CopyConstructorMode {

        SETTER, FIELD, BUILDER;
    }

    public Constructor copyConstructor(Type type, CopyConstructorMode mode) {
        final Constructor constructor = Constructor.of().public_()
            .add(Field.of(variableName(), type).final_());

        columns().forEachOrdered(c -> {
            switch (mode) {
                case FIELD: {
                    constructor.add("this." + variableName(c) + " = " + variableName() + "." + GETTER_METHOD_PREFIX + typeName(c) + "();");
                    break;
                }
                case SETTER:
                case BUILDER: {
                    final String setterPrefix = (mode == SETTER)
                        ? SETTER_METHOD_PREFIX : BUILDER_METHOD_PREFIX;

                    if (c.isNullable()) {
                        constructor.add(
                            variableName() + "."
                            + GETTER_METHOD_PREFIX + typeName(c)
                            + "().ifPresent(this::"
                            + setterPrefix + typeName(c)
                            + ");"
                        );
                    } else {
                        constructor.add(
                            setterPrefix + typeName(c)
                            + "(" + variableName()
                            + ".get" + typeName(c)
                            + "());"
                        );
                    }
                    break;
                }
            }
        });
        
        return constructor;
    }
}