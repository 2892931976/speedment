====

    Copyright (c) 2006-2015, Speedment, Inc. All Rights Reserved.

    Licensed under the Apache License, Version 2.0 (the "License"); You may not
    use this file except in compliance with the License. You may obtain a copy of
    the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and limitations under
    the License.
====

Use a normal POJO as configuration source instead of a database (Like JPA)

JPA

Introduce a rective model where one can subscribe to changes to a certain Entity. Listeners etc. Redraw GUI
Have an EntityLatest that always will reflect the latest known state of an entity. Relies on the reactive model.

Ability to map to own POJO:s. Annotated with JPA (@Column(name = "ID")) or BEAN ( @ConstructorProperties({ "title", "id"})


 // JSR-303 annotations can be generated, optionally @NotNull. @Size(max=400)  ...   @Id @Column(name = "ID", unique = true, nullable = false, precision = 7) @Override  public Integer getId() { return this.id; }


Update modes (Change Data Capture (CDC))
  Read once
  Poll
  Timestamp inspection
  Triggers ((http://www.jumpmind.com/products/symmetricds/features USING TRIGGERS...))
  Transaction logs (http://en.wikipedia.org/wiki/Change_data_capture) 
     MYSQL: https://github.com/shyiko/mysql-binlog-connector-java
     Oracle: https://github.com/linkedin/databus
http://www.davidlitchfield.com/oracle_forensics_part_1._dissecting_the_redo_logs.pdf, https://www.google.se/url?sa=t&rct=j&q=&esrc=s&source=web&cd=5&cad=rja&uact=8&sqi=2&ved=0CDwQFjAE&url=http%3A%2F%2Fwww.juliandyke.com%2FPresentations%2FRedoInternals.ppt&ei=Rgk6Vc6IIMebsgG3pICABA&usg=AFQjCNHTG96vpRUPMw8ZXW1qd4f-2Zkx2g&sig2=g4QBd7LDg3hv8adQElZZtg&bvm=bv.91427555,d.bGg


  BW http://blog.confluent.io/2015/04/23/bottled-water-real-time-integration-of-postgresql-and-kafka/


****
readSQL must check lastWasNull() if nullable


Remove all classes annotated with @Generated("Speedment") upon generation

Make Column generic with java type Column<T>

Kolla Ã¶ver alla foreach() som skall vara foreachOrdered()

After persist() and update() re-read the entity because it might have been changed.

Wrapp in Manager.stream() so that we may figure out predicates and short circuit them

GoogleAnalytics (from com.speedment.core.util.analytics)

Test case: Generate on Windows, compile on Linux and vice versa

Introduce ability to Tables (Entities) to implement custom interfaces. List of classes in the groovy file

REST interface with just READ with https://api.somehost.com/v1/com.company.project.db0.schema0.User?filter=[{"col":"name", "op":"==", "val":"John"}, {"col":"born", "op":">=", "val":"1976"}]&sort=[{"name":"ASC"}, {"country":"DESC"}]&skip=12&limit=24&fields=["name","age"]&apiKey=xxxxxxxxxxx  ALLOW AND() OR etc...   Include all Java8 stream components... Support gzip()
http://api.somehost.com/com.company.project.db0.schema0.User/primarykey
See http://docs.telerik.com/platform/backend-services/development/rest-api/querying/filtering
http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api

Introduce a Stream for each table with the updated items? Or event listener?

If there are no Managers and we call HareManager.get() then we shall provide an Exception that points to the problem, Not only an NPE

When generating setters we could also generate seters for foreign key objects like  image.setUser(user.getId()) -> image.setUser(user)

Columns that are NULL shall map to Optional<MAPPED CLASS>



